open Lang
open Vocab

type t = int * Path.t
and transaction = t

let get_tid (tid,path) = tid
let get_path (tid,path) = path

let to_string_internal_tseq : Global.t -> transaction -> string
= fun global (tid,path) ->
  let f = FuncMap.find (Path.get_fkey path) global.fmap in
  let g = get_cfg f in
  let enodes = List.filter (fun n -> is_extern_log_node n g) (Path.get_bp path) in
  let extern_fnames = List.map (fun n -> get_fname_extern_log_node n g) enodes in
  string_of_list ~first:"([" ~last:"])" ~sep:"->" Vocab.id extern_fnames

let to_string_transaction_simple : Global.t -> transaction -> string
= fun global (tid,path) ->
  let f = FuncMap.find (Path.get_fkey path) global.fmap in
  let fname = get_fname f in
  if fname="" then "fallback"
  else fname ^ to_string_internal_tseq global (tid,path)

let to_string_transactions_simple : Global.t -> transaction list -> string
= fun global tseq ->
  string_of_list ~first:"" ~last:"" ~sep:"->" (to_string_transaction_simple global) tseq

let to_string_tseq = to_string_transactions_simple

let tid = ref 0
let fresh_tid () = (tid:=!tid+1; !tid)
let cnstr_tid = 0
